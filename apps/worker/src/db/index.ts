import { Kysely, Generated } from "kysely";
import { D1Dialect } from "kysely-d1";

interface PersonTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<string>;

  first_name: string;
  gender: "male" | "female" | "other";

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  last_name: string | null;

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `modified_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  // modified_at: ColumnType<Date, string | undefined, never>;
}

interface PetTable {
  id: Generated<string>;
  name: string;
  owner_id: number;
  species: "dog" | "cat";
}

// Keys of this interface are table names.
interface Database {
  person: PersonTable;
  pet: PetTable;
}

export const getDB = (env: Bindings) => {
  const db = new Kysely<Database>({
    // Use MysqlDialect for MySQL and SqliteDialect for SQLite.
    dialect: new D1Dialect({ database: env.DATABASE }),
  });
  return db;
};
